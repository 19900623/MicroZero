1.	注释规范
使用JavaDoc风格的注释，推荐在注释中使用HTML格式标记，并作以下要求。


1.1.	头文件头部注释
包括：版权说明、版本号、生成日期、作者、内容、功能、与其它文件的关系、修改日志等，头文件的注释中还应有函数功能简要说明，例如：
/**
*Copyright (C), 2005-2007.
*@file  文件名，存储编码格式说明（ANSI、UNICODE、UTF8等）
*@brief 概要说明
*@author 作者1姓名或者工号
*@version 版本
*@date 创建及修改日期
*@warning 警示说明（如果有的话）
*@History: 修改历史记录列表，每行修改记录应包括修改日期、修改者及修改内容简述
*<p>时间 版本 作者 说明</p>
*/


1.2.	名字空间说明
包括：，描述，例如:
/**
*空间名称（例如：com::able::es::tools）
*@brief 描述
*<br>
*详细说明
*/


1.3.	类的头部注释规范
包括：类名、所在文件、描述，例如：
/**
*@class 类名字 类所在文件 "文件路径"
*@author 作者1姓名或者工号
*@brief 描述.
*<br>
*详细描述类的功能
*/


1.4.	函数注释规范
函数注释可以加在头文件的函数声明之前，或者加在源文件的函数声明前，推荐加在头文件里。
包括：函数的目的/功能、输入参数、输出参数、返回值、调用关系（函数、表）等，例如：
/**
*@brief 函数功能、性能等的描述.
*@author 作者1姓名或者工号
*@param[in] 参数1说明：类型、作用
*@param[out] 参数2说明：类型、作用
*@param 参数n说明：类型、作用
*@exception 异常说明
*@return 返回值说明：类型，作用
*@warning 警示说明：如果函数有副作用，或者某些参数存在内存分配及回收上的问题以
*及其它会产生不正常行为时请加上此说明。
*/


1.5.	变量注释规范
成员变量：加在成员变量声明之前
/**
@brief说明
*/
局部变量：跟在局部变量之后或同成员变量
///说明


1.6.	类型注释规范
enum、struct等复合的类型：加在类型声明之前，类型说明+成员说明，例如：
/**
@brief类型说明
@var 成员说明
@var 成员说明
@var 成员说明
*/
或者，在类型声明前
/**
@brief 类型说明
*/
在类型声明体中的成员之后
///成员说明
比如：
/**
@brief 类型说明示例
*/
struct tagSTRUCT
{
	int m1; ///说明1
	int m2; ///说明2
};
其它的宏及简单的类型声明的注释：
/**
@brief 类型说明
*/

2.	编码规范
2.1.	基本要求
?	每行不超过80列，如果不止80列的语句要折行
?	使用长度为4的Tab键缩进，禁止使用空格缩进
?	使用ANSI编码保存代码
?	使用有意义的命名，命名使用英文或汉语全拼，尽量使用能发音的命名
?	每个分号结最多占一行。
?	{ 和 } 独占一行。
?	操作符之前后加一个空格
?	逗号和 ( 后面加一个空格
?	尽量不要使用指针
?	包括结构体以及数组变量等所有的变量使用前要初始化
?	内存分配遵循谁申请谁释放的原则
?	尽量使用单线程
?	所有变量初始化后再使用，变量定义集中在函数头部或类的尾部或文件的头部

2.2.	命名
使用匈牙利命名法，另外：
?	类或变量名禁止使用下划线，每个单词的首字母大写，例如：int nItemCount;
?	类名，以大写字母C开头，后跟首字母大写的类名，例如：class CUserInformation;
?	接口名以大写字母I开头，后跟首字母大写的接口名，例如：class IMyInterface
?	类成员变量使用m_前缀，例如int m_nItemCont;
?	全局变理使用g_前缀，例如：int g_nItemCont;
?	通用的类型缩写用为变量的前缀，指针变量在类型前缀前加上前缀p，例如：int nVariant; 其中的n代表整型，禁止使用自定义类型的缩写作为变量名前缀；char* pszVariant;其中 p表示指针,sz表示类型为0结尾的字符串类型。
?	宏定义常量为全大写单词的组合，单词之间使用下划线分隔，例如：#define USER_NAME _T(“guest”) 
?	结构体定义使用tag前缀+全大写名称，例如：tagSTRUCTNAME
?	函数名首字母大写
?	函数声明：类型、返回值、函数名、参数以及 ) 各独占一行，例如：
virtual
int
GetItemCount(
		int nParam1,
		int nParam2
		);
?	名字空间首字母小写
?	如有多个相邻赋值行以TAB键进行对齐，（=号后面跟一个空格），例如：
INT		nNum			= 0;
LPCTSTR		pszName			= NULL;
LPVOID		pData			= NULL;
CString*	pstrText		= new CString;
TCHAR		aszComment[64]		= { _T(‘\0’) };
