@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc.RazorPages
@{
    ViewData["Title"] = "Flow";
    ViewData["page"] = "flow";
}
@section Styles
    {
    <style type="text/css">
        .frameValue {
            color: blue;
            background-color: silver;
            border: 1px dotted blue;
            padding: 3px;
        }

        .frames {
            font-size: 9pt;
        }

        .step {
            padding-top: 5px;
            color: maroon;
            font-size: 12pt;
        }

        .join {
            background-color: cadetblue
        }

        .call {
            background-color: blue
        }

        .ok {
            background-color: greenyellow
        }

        .run {
            background-color: silver
        }

        .failed {
            background-color: red
        }

        .toleft {
            margin-top: -10px;
            height: 53px;
            width: 95px;
            display: block;
            border-style: solid;
            border-width: 0 2px 2px 0;
            border-color: black;
            margin-left: -5px;
        }

        .toright {
            margin-top: -10px;
            height: 53px;
            width: 91px;
            display: block;
            border-style: solid;
            border-width: 0 0 2px 2px;
            border-color: black;
            margin-left: 85px;
        }

        .toline {
            margin-top: -10px;
            display: block;
            height: 53px;
            border-bottom: 2px solid black;
            width: 183px;
            margin-left: -5px;
        }

        .toleft2 {
            margin-top: -10px;
            height: 53px;
            width: 95px;
            display: block;
            border-style: dotted;
            border-width: 0 2px 2px 0;
            border-color: black;
            margin-left: -5px;
        }

        .toright2 {
            margin-top: -10px;
            height: 53px;
            width: 91px;
            display: block;
            border-style: dotted;
            border-width: 0 0 2px 2px;
            border-color: black;
            margin-left: 85px;
        }

        .toline2 {
            margin-top: -10px;
            display: block;
            height: 53px;
            border-bottom: 2px dotted black;
            width: 183px;
            margin-left: -5px;
        }

        .toempty {
            margin-top: -10px;
            display: block;
            height: 53px;
            width: 183px;
            margin-left: -5px;
        }
        .point_left {
            display: inline-block;
            overflow: hidden;
            width: 10px;
            height: 65px;
            @if (Context.Request.Headers["USER-AGENT"].ToString().IndexOf("Firefox", StringComparison.Ordinal) > -1)
            {
                <text>
                line-height: 80px;
                </text>
            }
            else
            {
                <text>
                line-height: 71px;
                </text>
            }
            font-size: 10pt;
            z-index: 999;
            text-align: left;
            float: left;
        }

        .point_right {
            display: inline-block;
            overflow: hidden;
            width: 10px;
            height: 65px;
            @if (Context.Request.Headers["USER-AGENT"].ToString().IndexOf("Firefox", StringComparison.Ordinal) > -1)
            {
                <text>
            line-height: 78px;
            </text>
            }
            else
            {
                <text>
            line-height: 71px;
            </text>
            }
            font-size: 10pt;
            float: right;
            z-index: 999;
            text-align: right;
        }
        .point {
            cursor: url('/favicon.ico'),auto;
            display: inline-block;
            width: 149px;
            padding-top: 5px;
            height: 60px;
            text-align: center;
            z-index: 1;
            float: left;
        }

        .range {
            margin: 10px 0 10px 0;
            display: block;
            width: 100%;
            height: 65px;
        }
        .empty {
            display: block;
            width: 166px;
            height: 83px;
            margin: 0;
            border: solid 1px #f5f5f5;
        }

        .title {
            display: block;
            width: 170px;
            padding: 10px 0 10px 0;
            margin: 0;
            background-color: silver;
            color: green;
            font-size: 16px;
            height: 40px;
            border-bottom: 1px solid green;
            text-align: center;
        }

        .station {
            vertical-align: top;
            display: inline-block;
            margin: 0;
            width: 171px;
            border-width: 1px 1px 1px 0;
            border-style: solid;
            border-color: green;
            padding: 0;
        }

        .station1 {
            vertical-align: top;
            display: inline-block;
            margin: 0;
            width: 170px;
            border-width: 1px 1px 1px 1px;
            border-style: solid;
            border-color: green;
            padding: 0;
        }
    </style>
}
@section InitScript{
    <script>
        var steps = [];
        var tips = [];
        var tip = '';
        var hei = 0;
        var empty = '';
        var flowHtml = '';
        var lines = [];
        var names = [];
        function showInfo() {
            $('#infoSide').width(vue_option.data.infoshow ? '600px' : '1px');
            $('#stepPanel').html(tip);
            $('#flowPanel').html(flowHtml);
            $('#flowPanel').width((lines.length * 172 + 21) + "px");
        }
        function showTip(step, type) {
            tip = '';
            for (var idx = 0; idx < steps.length; idx++) {
                if (steps[idx] === step) {
                    tip = tips[idx][type];
                    break;
                }
            }
            $('#stepPanel').html(tip);
        }
        function showFlow(rid) {
            try {
                hei = 0;
                steps = [];
                tips = [];
                empty = '';
                lines = [];
                names = [];
                tip = '';
                flowHtml = '';
                var idx;
                var root = null;
                for (idx = 0; idx < vue_option.data.flows.length; idx++) {
                    if (vue_option.data.flows[idx].rid === rid) {
                        root = vue_option.data.flows[idx];
                        break;
                    }
                }
                if (root) {
                    showFlowItem(root.start, null, -1);

                    hei = hei * 85 + 80;
                    for (idx = 0; idx < lines.length; idx++) {
                        if (lines[idx]) {
                            if (idx === 0)
                                flowHtml += "<div class='station1' style='height:" + hei + "px'>" + lines[idx] + "</div>";
                            else
                                flowHtml += "<div class='station' style='height:" + hei + "px'>" + lines[idx] + "</div>";
                        }
                    }
                }
                showInfo();
            } catch (e) {
                alert(e);
            }
        }
        function showLine(start, end, back, begin, htm) {
            hei++;
            empty += "<div class='empty'><div class='toempty'></div></div>";
            var i;
            lines[start] += '<div class="range">';
            if (start > end) {
                if (begin)
                    lines[start] += '<div class="point_left"></div>' + htm + '<div class="point_right"></div>';
                else
                    lines[start] += '<div class="point_left"><i class="el-icon-arrow-right"></i></div>' + htm + '<div class="point_right"></div>';
                for (i = 0; i < names.length; i++) {
                    if (start === i) {
                        continue;
                    } else if (i === end) {
                        lines[i] += back
                            ? "<div class='empty'><div class='toright2'></div></div>"
                            : "<div class='empty'><div class='toright'></div></div>";
                    } else if (i > end && i < start) {
                        lines[i] += back
                            ? "<div class='empty'><div class='toline2'></div></div>"
                            : "<div class='empty'><div class='toline'></div></div>";
                    } else {
                        lines[i] += "<div class='empty'></div>";
                    }
                }
            } else {
                if (begin)
                    lines[start] += '<div class="point_left"></div>' + htm + '<div class="point_right"></div>';
                else
                    lines[start] += '<div class="point_left"></div>' + htm + '<div class="point_right "><i class="el-icon-arrow-left"></i></div>';
                for (i = 0; i < names.length; i++) {
                    if (start === i) {
                        continue;
                    } else if (i === end) {
                        lines[i] += back
                            ? "<div class='empty'><div class='toleft2'></div></div>"
                            : "<div class='empty'><div class='toleft'></div></div>";
                    } else if (i > start && i < end) {
                        lines[i] += back
                            ? "<div class='empty'><div class='toline2'></div></div>"
                            : "<div class='empty'><div class='toline'></div></div>";
                    } else {
                        lines[i] += "<div class='empty'></div>";
                    }
                }
            }
            lines[start] += '</div>';
        }
        function showFlowItem(flow, step, pre) {
            var row = -1;
            for (var i = 0; i < names.length; i++) {
                if (names[i] === flow.station) {
                    row = i;
                    break;
                }
            }
            if (row === -1) {
                names.push(flow.station);
                lines.push(`<div class='title'>${flow.station}</div>${empty}`);
                row = lines.length - 1;
            }
            if (step != null) {
                steps.push(step);
                tips.push([
                    `<div><i class='step'> ${step}</i><br/>${flow.station}/${flow.cmd}<br/><div>${flow.steps["Request"]}</div></div>`,
                    `<div><i class='step'> ${step}</i><br/>${flow.station}/${flow.cmd}<br/><div>${flow.steps["Result"]}</div></div>`,
                    `<div><i class='step'> ${step}</i><br/>${flow.station}/${flow.cmd}<br/><div>${flow.info}</div></div>`
                ]);

                showLine(row, pre, false, false, `<div class='point join' onclick='showTip(\"${step}\",0)'><i class='step'>${step}</i><br/>${flow.cmd}</div>`);
            } else {
                showLine(row, pre, false, true, `<div class='point call'><br><i class='step'>Begin</i></div>`);
            }

            var title = step == null
                ? "Step "
                : step;
            for (var idx = 0; idx < flow.child.length; idx++) {
                showFlowItem(flow.child[idx], title + (idx + 1).toString() + ".", row);
            }

            var cls;
            switch (flow.state) {
                case "General":
                case "Publish":
                case "Runing":
                    cls = 'run';
                    break;
                case "Ok":
                    cls = 'ok';
                    break;
                default:
                    cls = 'failed';
                    break;
            }
            if (step == null) {
                lines[pre] += `<div class='point ${cls}'><i class='step'>End</i><br/>${flow.state}</div>`;//<br/>${flow.station}<br/>${flow.cmd}
            } else {
                showLine(pre, row, true, false, `<div class='point ${cls}' onclick='showTip(\"${step}\",1)'><i class='step'>${step}</i><br/>${flow.state}</div>`);
            }
        }
        var ws_api;

        function modify_sub(title, callback) {
            vue_obj.$prompt(title, '流程跟踪', {
                confirmButtonText: '确定',
                cancelButtonText: '取消'
            }).then(({ value }) => {
                if (callback)
                    callback(value);
                else
                    ws_api.change_sub(value);
                if (!value)
                    value = '<i>[空]<i>';
                vue_obj.$message({
                    type: 'info',
                    message: '订阅标签已修改为' + value
                });
            }).catch(() => {
                if (callback)
                    callback('');
            });
        }
        extend_data({
            infoshow: false,
            menu_wid: "360px",
            flows: []
        });
        extend_methods({
            menu_select: function (index, indexPath) {
                if (!index)
                    return;
                if (index == 'menu-hide') {
                    $('#infoSide').width('1px');
                    vue_option.data.infoshow = false;
                    return;
                }
                else if (index == 'menu-show') {
                    vue_option.data.infoshow = true;
                    $('#infoSide').width('600px');
                    return;
                }
                else if (index == 'menu-msg-clear') {
                    vue_option.data.flows = [];
                    return;
                }
                else if (index == 'menu-msg-search') {
                    modify_sub('请输入查询标签', function (val) {
                        if (!val)
                            return;
                        ws_api.change_sub('~#' + val);
                        vue_option.data.flows = [];
                        do_sync_get('/Flow/Query/' + encodeURI(val), '查询', function (data) {
                            vue_obj.$message({
                                type: 'info',
                                message: data
                            });
                            //#AE951C2E354444E9AD3F95C64BB47969
                        });
                    });
                    return;
                }
                else if (index == 'menu-msg-sub') {
                    modify_sub('请输入订阅标签');
                    return;
                }
                showFlow(index);
            }
        });
    </script>
}
@section Scripts{
    <script>
        modify_sub('请输入订阅标签', function (val) {
            ws_api = new ws({
                address: `ws://${location.host}/trace_flow`,
                sub: val,
                onmessage: function (flow) {
                    if (vue_option.data.flows.length > 300)
                        return;
                    vue_update_array(vue_option.data.flows, flow, 'rid');
                    showInfo();
                }
            });
            ws_api.open();
        });
    </script>
}
@section Menus{
    <el-menu :collapse="isCollapse"
             @@select="menu_select"
             default-active="menu-msg"
             background-color="#545c64"
             text-color="#fff"
             :default-openeds='["menu-type","menu-msg"]'
             active-text-color="#ffd04b">
        <el-submenu index="menu-type">
            <template slot="title">
                <i class="el-icon-view"></i>
                <span>操作</span>
            </template>
            <el-menu-item index="menu-show">
                <template slot="title">
                    <i class="el-icon-arrow-right"></i>
                    <span>展开</span>
                </template>
            </el-menu-item>
            <el-menu-item index="menu-hide">
                <template slot="title">
                    <i class="el-icon-arrow-left"></i>
                    <span>收起</span>
                </template>
            </el-menu-item>
            <el-menu-item index="menu-msg-sub">
                <template slot="title">
                    <i class="el-icon-service"></i>
                    <span>修改订阅标签</span>
                </template>
            </el-menu-item>
            <el-menu-item index="menu-msg-search">
                <template slot="title">
                    <i class="el-icon-search"></i>
                    <span>历史查询</span>
                </template>
            </el-menu-item>
            <el-menu-item index="menu-msg-clear">
                <template slot="title">
                    <i class="el-icon-delete"></i>
                    <span>清除实时消息</span>
                </template>
            </el-menu-item>
        </el-submenu>
        <el-submenu index="menu-msg">
            <template slot="title">
                <i class="el-icon-message"></i>
                <span>实时消息(仅显示最早300条)</span>
            </template>
            <template v-for="item in flows">
                <el-menu-item v-bind:index="item.rid">
                    <template slot="title">
                        <i class="el-icon-bell"></i>
                        <span>{{item.start.state}}|{{item.start.cmd}}</span>
                    </template>
                </el-menu-item>
            </template>
        </el-submenu>
    </el-menu>
}
<el-container style="width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden">
    <el-main style="margin:0;padding:0;overflow:auto">
        <div id="flowPanel" style="margin: 0; padding: 10px; overflow: visible">
        </div>
    </el-main>

    <el-aside id="infoSide" style="padding: 10px;text-align:left;width:1px;border-left:solid 2px slategray; overflow: auto; background-color: white;color:black">
        <div id="stepPanel" style="padding: 10px;margin: 0; overflow: visible;">
        </div>
    </el-aside>
</el-container>

