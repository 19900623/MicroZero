@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc.RazorPages
@{
    ViewData["Title"] = "Flow";
    ViewData["page"] = "flow";
}
@section Styles
    {
<style type="text/css">
        .frameValue {
            color: blue;
            background-color: silver;
            border: 1px dotted blue;
            padding: 3px;
        }

        .frames {
            font-size: 9pt;
        }

        .step {
            padding-top: 5px;
            color: maroon;
            font-size: 12pt;
        }

        .join {
            background-color: cadetblue
        }

        .call {
            background-color: blue
        }

        .ok {
            background-color: greenyellow
        }

        .run {
            background-color: silver
        }

        .failed {
            background-color: red
        }

        .toleft {
            margin-top: -10px;
            height: 53px;
            width: 95px;
            display: block;
            border-style: solid;
            border-width: 0 2px 2px 0;
            border-color: black;
            margin-left: -5px;
        }

        .toright {
            margin-top: -10px;
            height: 53px;
            width: 91px;
            display: block;
            border-style: solid;
            border-width: 0 0 2px 2px;
            border-color: black;
            margin-left: 85px;
        }

        .toline {
            margin-top: -10px;
            display: block;
            height: 53px;
            border-bottom: 2px solid black;
            width: 183px;
            margin-left: -5px;
        }

        .toleft2 {
            margin-top: -10px;
            height: 53px;
            width: 95px;
            display: block;
            border-style: dotted;
            border-width: 0 2px 2px 0;
            border-color: black;
            margin-left: -5px;
        }

        .toright2 {
            margin-top: -10px;
            height: 53px;
            width: 91px;
            display: block;
            border-style: dotted;
            border-width: 0 0 2px 2px;
            border-color: black;
            margin-left: 85px;
        }

        .toline2 {
            margin-top: -10px;
            display: block;
            height: 53px;
            border-bottom: 2px dotted black;
            width: 183px;
            margin-left: -5px;
        }

        .toempty {
            margin-top: -10px;
            display: block;
            height: 53px;
            width: 183px;
            margin-left: -5px;
        }
        .point_left {
            display: inline-block;
            overflow: hidden;
            width: 10px;
            height: 65px;
            @if (Context.Request.Headers["USER-AGENT"].ToString().IndexOf("Firefox", StringComparison.Ordinal) > -1)
            {
                <text>
                line-height: 80px;
                </text>
            }
            else
            {
                <text>
                line-height: 71px;
                </text>
            }
            font-size: 10pt;
            z-index: 999;
            text-align: left;
            float: left;
        }

        .point_right {
            display: inline-block;
            overflow: hidden;
            width: 10px;
            height: 65px;
            @if (Context.Request.Headers["USER-AGENT"].ToString().IndexOf("Firefox", StringComparison.Ordinal) > -1)
            {
                <text>
            line-height: 78px;
            </text>
            }
            else
            {
                <text>
            line-height: 71px;
            </text>
            }
            font-size: 10pt;
            float: right;
            z-index: 999;
            text-align: right;
        }
        .point {
            cursor: url('/favicon.ico'),auto;
            display: inline-block;
            width: 149px;
            padding-top: 5px;
            height: 60px;
            text-align: center;
            z-index: 1;
            float: left;
        }

        .range {
            margin: 10px 0 10px 0;
            display: block;
            width: 100%;
            height: 65px;
        }
        .empty {
            display: block;
            width: 166px;
            height: 83px;
            margin: 0;
            border: solid 1px #f5f5f5;
        }

        .title {
            display: block;
            width: 170px;
            padding: 10px 0 10px 0;
            margin: 0;
            background-color: silver;
            color: green;
            font-size: 16px;
            height: 40px;
            border-bottom: 1px solid green;
            text-align: center;
        }

        .station {
            vertical-align: top;
            display: inline-block;
            margin: 0;
            width: 171px;
            border-width: 1px 1px 1px 0;
            border-style: solid;
            border-color: green;
            padding: 0;
        }

        .station1 {
            vertical-align: top;
            display: inline-block;
            margin: 0;
            width: 170px;
            border-width: 1px 1px 1px 1px;
            border-style: solid;
            border-color: green;
            padding: 0;
        }
</style>
}
@section VUE{
    <script>
        var steps = [];
        var tips = [];
        function showTip(step) {
            var tip = '';
            for (var idx = 0; idx < steps.length; idx++) {
                if (steps[idx] === step) {
                    tip = tips[idx];
                    break;
                }
            }
            $('#stepPanel').html(tip);
        }
        var hei = 0;
        var empty = '';
        var lines = [];
        var names = [];
        function showFlow(rid) {
            try {
                $('#stepPanel').html('');
                var idx;
                var root = null;
                for (idx = 0; idx < vue_option.data.flows.length; idx++) {
                    if (vue_option.data.flows[idx].rid === rid) {
                        root = vue_option.data.flows[idx];
                        break;
                    }
                }
                if (!root)
                    return;
                hei = 0;
                steps = [];
                tips = [];
                empty = '';
                lines = [];
                names = [];
                showFlowItem(root.start, null, -1);

                var all = '';
                hei = hei * 85 + 80;
                for (idx = 0; idx < lines.length; idx++) {
                    if (lines[idx]) {
                        if (idx === 0)
                            all += "<div class='station1' style='height:" + hei + "px'>" + lines[idx] + "</div>";
                        else
                            all += "<div class='station' style='height:" + hei + "px'>" + lines[idx] + "</div>";
                    }
                }
                $('#flowPanel').html(all);
                $('#flowPanel').width((lines.length * 172 + 21) + "px");
            } catch (e) {
                alert(e);
            }
        }
        function showLine(start, end, back, begin, htm) {
            hei++;
            empty += "<div class='empty'><div class='toempty'></div></div>";
            var i;
            lines[start] += '<div class="range">';
            if (start > end) {
                if (begin)
                    lines[start] += '<div class="point_left"></div>' + htm + '<div class="point_right"></div>';
                else
                    lines[start] += '<div class="point_left"><i class="el-icon-arrow-right"></i></div>' + htm + '<div class="point_right"></div>';
                for (i = 0; i < names.length; i++) {
                    if (start === i) {
                        continue;
                    } else if (i === end) {
                        lines[i] += back
                            ? "<div class='empty'><div class='toright2'></div></div>"
                            : "<div class='empty'><div class='toright'></div></div>";
                    } else if (i > end && i < start) {
                        lines[i] += back
                            ? "<div class='empty'><div class='toline2'></div></div>"
                            : "<div class='empty'><div class='toline'></div></div>";
                    } else {
                        lines[i] += "<div class='empty'></div>";
                    }
                }
            } else {
                if (begin)
                    lines[start] += '<div class="point_left"></div>' + htm + '<div class="point_right"></div>';
                else
                    lines[start] += '<div class="point_left"></div>' + htm + '<div class="point_right "><i class="el-icon-arrow-left"></i></div>';
                for (i = 0; i < names.length; i++) {
                    if (start === i) {
                        continue;
                    } else if (i === end) {
                        lines[i] += back
                            ? "<div class='empty'><div class='toleft2'></div></div>"
                            : "<div class='empty'><div class='toleft'></div></div>";
                    } else if (i > start && i < end) {
                        lines[i] += back
                            ? "<div class='empty'><div class='toline2'></div></div>"
                            : "<div class='empty'><div class='toline'></div></div>";
                    } else {
                        lines[i] += "<div class='empty'></div>";
                    }
                }
            }
            lines[start] += '</div>';
        }
        function showFlowItem(flow, step, pre) {
            var row = -1;
            for (var i = 0; i < names.length; i++) {
                if (names[i] === flow.station) {
                    row = i;
                    break;
                }
            }
            if (row === -1) {
                names.push(flow.station);
                lines.push(`<div class='title'>${flow.station}</div>${empty}`);
                row = lines.length - 1;
            }
            if (step != null) {
                var tip = `<div>\
                                                                               <i class='step'> ${step}</i><br/>${flow.station}/${flow.cmd}<br/>\
                                                                               <div>${flow.info}</div>\
                                                                            </div>`;
                steps.push(step);
                tips.push(tip);

                showLine(row, pre, false, false, `<div class='point join' onclick='showTip(\"${step}\")'><i class='step'>${step}</i><br/>${flow.cmd}</div>`);
            } else {
                showLine(row, pre, false, true, `<div class='point call'><br><i class='step'>Begin</i></div>`);
            }

            var title = step == null
                ? "Step "
                : step;
            for (var idx = 0; idx < flow.child.length; idx++) {
                showFlowItem(flow.child[idx], title + (idx + 1).toString() + ".", row);
            }

            var cls;
            switch (flow.state) {
                case "General":
                case "Publish":
                case "Runing":
                    cls = 'run';
                    break;
                case "Ok":
                    cls = 'ok';
                    break;
                default:
                    cls = 'failed';
                    break;
            }
            if (step == null) {
                lines[pre] += `<div class='point ${cls}'><i class='step'>End</i><br/>${flow.state}</div>`;//<br/>${flow.station}<br/>${flow.cmd}
            } else {
                showLine(pre, row, true, false, `<div class='point ${cls}' onclick='showTip(\"${step}\")'><i class='step'>${step}</i><br/>${flow.state}</div>`);
            }
        }
        extend_data({
            flows: []
        });
        extend_methods({
            menu_select: function (index, indexPath) {
                if (!index)
                    return;
                if (index == 'hide')
                    $('#infoSide').width('1px');
                else if (index == 'show')
                    $('#infoSide').width('600px');
                showFlow(index);
            }
        });
        var ws_api = new ws({
            address: `ws://${location.host}/trace`,
            sub: "flow",
            onmessage: function (flow) {
                for (var idx = 0; idx < vue_option.data.flows.length; idx++) {
                    if (vue_option.data.flows[idx].rid == flow.rid) {
                        vue_option.data.flows[idx].start = flow.start;
                        return;
                    }
                }
                if (vue_option.data.flows.length >= 100) {
                    return;
                    vue_option.data.flows.pop();
                }
                vue_option.data.flows.push(flow);
            }
        });
        ws_api.open();
    </script>
}
@section Menus{
    <el-menu :collapse="isCollapse"
             @@select="menu_select"
             default-active="title"
             background-color="#545c64"
             text-color="#fff"
             active-text-color="#ffd04b">
        <el-submenu index="type">
            <template slot="title">
                <i class="el-icon-view"></i>
                <span>详情</span>
            </template>
            <el-menu-item-group>
                <el-menu-item index="show">
                    <template slot="title">
                        <i class="el-icon-arrow-right"></i>
                        <span>展开</span>
                    </template>
                </el-menu-item>
                <el-menu-item index="hide">
                    <template slot="title">
                        <i class="el-icon-arrow-left"></i>
                        <span>收起</span>
                    </template>
                </el-menu-item>
            </el-menu-item-group>
        </el-submenu>
        <el-submenu index="msg">
            <template slot="title">
                <i class="el-icon-message"></i>
                <span>动态消息</span>
            </template>
            <el-menu-item-group>
                <template v-for="item in flows">
                    <el-menu-item v-bind:index="item.rid">
                        <template slot="title">
                            <i class="el-icon-bell"></i>
                            <span>{{item.rid}}</span>
                        </template>
                    </el-menu-item>
                </template>
            </el-menu-item-group>
        </el-submenu>
    </el-menu>
}
<el-container style="width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden">
    <el-main style="margin:0;padding:0;overflow:auto">
        <div id="flowPanel" style="margin: 0; padding: 10px; overflow: visible">
        </div>
    </el-main>

    <el-aside id="infoSide" style="padding: 10px;text-align:left;width:1px;border-left:solid 2px slategray; overflow: auto; background-color: white;color:black">
        <div id="stepPanel" style="padding: 10px;margin: 0; overflow: visible;">
        </div>
    </el-aside>
</el-container>

