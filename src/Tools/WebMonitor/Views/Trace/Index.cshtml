
@using Newtonsoft.Json
@using MicroZero.Http.Route
@{
    ViewData["Title"] = "Trace";
    ViewData["page"] = "trace";
    int min = -1;
    if (!string.IsNullOrEmpty(Url.ActionContext.HttpContext.Request.QueryString.Value))
    {
        var m = Url.ActionContext.HttpContext.Request.Query["m"];
        if (string.IsNullOrEmpty(m) || !int.TryParse(m, out min))
        {
            min = -1;
        }
    }
}
@section VUE{
    <script>
        var data = [@(Html.Raw(JsonConvert.SerializeObject(ApiCounter.Root)))];

        extend_data({
            hosts: data,
            host: data[0]
        });
        extend_methods({
            tree_select: function (vl, node) {
                if (!vl)
                    return;
                vue_option.data.host = vl;
                reset();
            }
        });
    </script>
}
@section Charts{

    <script>

        function new_array(base) {
            var time = vue_option.data.host.time;
            var arr = [];
            for (var i = -36; i <= 0; i += 1) {
                arr.push({
                    x: time + i * 1000,
                    y: base
                });
            }
            return arr;
        }
        var chartLastTime = Highcharts.chart('c_LastTime',
            line_chart_option({
                title: {
                    text: 'Last Time'
                },
                @if (min >= 0)
                {
                    <text>
                        yAxis: {
                            min: 0
                        },
                    </text>
                }
                series: [
                    {
                        name: 'LastTime',
                        linecap: null,
                        data: new_array(vue_option.data.host.LastTime)
                    }
                ]
            })
        );
        var chartUnitCount = Highcharts.chart('c_UnitCount',
            line_chart_option({
                title: {
                    text: 'Unit Count'
                },
                @if (min >= 0)
                {
                    <text>
                        yAxis: {
                            min: 0
                        },
                    </text>
                }
                series: [
                    {
                        name: 'UnitCount',
                        linecap: null,
                        data: (new_array(vue_option.data.host.UnitCount))
                    }
                ]
            })
        );
        var chart_max = Highcharts.chart('c_max',
            solidgauge_chart_option(3000,{
                title: {
                    text: 'Max Time'
                },
                series: [
                    {
                        name: 'Speed',
                        data: [vue_option.data.host.MaxTime]
                    }
                ]
            }));
        var chart_min = Highcharts.chart('c_min',
            solidgauge_chart_option(100,{
                title: {
                    text: 'Min Time'
                },
                series: [
                    {
                        name: 'Speed',
                        data: [vue_option.data.host.MinTime]
                    }
                ]
            }));
        var chart_avg = Highcharts.chart('c_avg',
            solidgauge_chart_option(500,{
                title: {
                    text: 'Avg Time'
                },
                series: [
                    {
                        name: 'Speed',
                        data: [vue_option.data.host.AvgTime],
                        formatter: function() {
                            return this.value.toFixed(2);
                        }
                    }
                ]
            }));
        function update() {
            chartUnitCount.series[0].addPoint([vue_option.data.host.time, vue_option.data.host.UnitCount], true, true);
            chartLastTime.series[0].addPoint([vue_option.data.host.time, vue_option.data.host.LastTime], true, true);

            update_chart(chart_min, vue_option.data.host.MinTime);
            update_chart(chart_max, vue_option.data.host.MaxTime);
            update_chart(chart_avg, vue_option.data.host.AvgTime);
        }
        function reset() {
            chartUnitCount.series[0].setData(new_array(vue_option.data.host.UnitCount), true, true);
            chartLastTime.series[0].setData(new_array(vue_option.data.host.LastTime), true, true);

            update_chart(chart_min, vue_option.data.host.MinTime);
            update_chart(chart_max, vue_option.data.host.MaxTime);
            update_chart(chart_avg, vue_option.data.host.AvgTime);
        }
        function copychild(src, dest) {
            if (!dest)
                return false;
            for (var destidx = 0; destidx < dest.length; destidx++) {
                var hase = false;
                for (var srcidx = 0; srcidx < src.length; srcidx++) {
                    if (src[srcidx].id === dest[destidx].id) {
                        copy(src[srcidx], dest[destidx]);
                        hase = true;
                        break;
                    }
                }
                if (!hase)
                    src.push(dest[destidx]);
            }
            return true;
        }
        function copy(src, dest) {
            src.LastCall = dest.LastCall;
            src.time = dest.time;
            src.TotalTime = dest.TotalTime / 1000.0;
            src.Count = dest.Count;
            src.UnitCount = dest.UnitCount;
            src.Qps = dest.Qps;
            src.Tps = dest.Tps;
            src.MaxTime = dest.MaxTime / 1000.0;
            src.MinTime = dest.MinTime / 1000.0;
            src.AvgTime = dest.AvgTime / 1000.0;
            src.LastTime = dest.LastTime / 1000.0;
            src.TimeOut = dest.TimeOut;
            src.FormalError = dest.FormalError;
            src.Deny = dest.Deny;
            src.Bug = dest.Bug;
            src.Error = dest.Error;
            copychild(src.children, dest.children);
            if (src.id === vue_option.data.host.id) {
                update();
            }
        }
        var ws_api=new ws({
            address: "ws://" + location.host + "/api",
            sub: "",
            onmessage: function (host) {
                copy(vue_option.data.hosts[0], host);
            }
        });
        ws_api.open();
    </script>
}
@section Menus{
    <el-tree :data="hosts"
             default-expand-all
             node-key="id"
             ref="tree"
             @@current-change="tree_select"
             :expand-on-click-node="false"
             highlight-current>
    </el-tree>
}
<el-container style="width:100%;height:100%;margin:0;padding:0;overflow:hidden">
    <el-main style="width:100%;height:100%;margin:0;padding:0;overflow:hidden">
        <div id="c_LastTime" style="display: inline-block; width: 49%;min-width:400px;height:280px"></div>
        <div id="c_UnitCount" style="display: inline-block; width: 49%;min-width:400px;height:280px"></div>
        <div>
            <div style="display: inline-block;width : 32%">
                <div id="c_max" style="min-width: 200px; height: 200px; "></div>
            </div>
            <div style="display: inline-block;width : 32%">
                <div id="c_min" style=" min-width: 200px; height: 200px; margin: 0 auto"></div>
            </div>
            <div style="display: inline-block;width : 32%">
                <div id="c_avg" style="min-width: 200px; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </el-main>

    <el-aside style="height:100%;line-height:30px;padding:10px;text-align:left;width:300px;border:solid 1px whitesmoke">
        <template>
            <div>
                <div><h4>{{host.id}}</h4></div>
                <div><span class="my_label">Last Call</span> : {{host.LastCall | formatDate}}</div>
                <div><span class="my_label">Total Time</span> : {{host.TotalTime | thousandsNumber}}ms</div>
                <div><span class="my_label">Count Call</span> : {{host.Count | thousandsNumber}}</div>
                <div><span class="my_label">Last Call</span> : {{host.UnitCount| thousandsNumber}}</div>
                <div><span class="my_label">Ideal QPS</span> : {{host.Ideal}}/s</div>
                <div><span class="my_label">Max Time</span> : {{host.MaxTime | formatNumber1}}ms</div>
                <div><span class="my_label">Min Time</span> : {{host.MinTime | formatNumber1}}ms</div>
                <div><span class="my_label">Avg Time</span> : {{host.AvgTime | formatNumber1}}ms</div>
                <div><span class="my_label">Last Time</span> : {{host.LastTime | formatNumber1}}ms</div>
                <div><span class="my_label">Time Out</span> : {{host.TimeOut}}</div>
                <div><span class="my_label">Formal Error</span> : {{host.FormalError}}</div>
                <div><span class="my_label">Deny Access</span> : {{host.Deny}}</div>
                <div><span class="my_label">Bug</span> : {{host.Bug}}</div>
                <div><span class="my_label">Error</span> : {{host.Error}}</div>
            </div>
        </template>
    </el-aside>
</el-container>

